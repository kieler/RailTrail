# "inspired" by https://github.com/alexeagleson/docker-node-postgres-template/blob/master/docker-compose.yml
version: '3.8'
services:
  backend:
    build: .
    working_dir: /app
    depends_on:
      - postgres
    ports:
      - "${SERVER_PORT_EXT}:${SERVER_PORT_INT}"
    environment:
      # See https://stackoverflow.com/questions/33357567/econnrefused-for-postgres-on-nodejs-with-dockers
      - DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PWD}@postgres:${POSTGRES_PORT_EXT}/${POSTGRES_DB}?schema=public"
      - SERVER_PORT=${SERVER_PORT_EXT}
    volumes:
      - ./:/app/
      # node_modules workaround for volumes
      # https://stackoverflow.com/a/32785014
      - /app/node_modules
    networks:
      - rtnet

  postgres:
    image: postgres:14.1-alpine
    restart: always
    environment:
      # set env-variables for config of postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PWD}
      - POSTGRES_DB=${POSTGRES_DB}
    # we may not need any ports here if we do not want access from the outside
    # (the postgres image exposes 5432, so the nodejs-app should still be able to connect)
    ports:
      # Standard port for PostgreSQL databases
      - "${POSTGRES_PORT_EXT}:${POSTGRES_PORT_INT}"
    #volumes:
      # This could be used for initialization purposes
      #- ./database-install.sql:/docker-entrypoint-initdb.d/database-install.sql
    networks:
      - rtnet
networks:
  rtnet:
    driver: bridge
